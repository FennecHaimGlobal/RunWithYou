@model RunWithYou.Models.TrailsViewModels
<script type="text/javascript">
    $(document).ready(function () {
        $('.datepicker').datepicker({
            format: 'mm/dd/yyyy',
            startDate: '-3d'
        });
    });
</script>

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #map {
        height: 410px;
    }

    .form-horizontal .control-label.label-on-left {
        text-align: left;
    }

    .more-pading {
    }
</style>


<div class="container">

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="row">
            <div class="col-md-11 text-info">
                <h4>Create a new Trail and invite friend</h4>
            </div>
        </div>

        <div class="row">
            <div class="col-md-5">
                <div class="form-horizontal">
                    <br />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    @Html.HiddenFor(model => model.Trail.geo_location, new { id = "encoded-polyline" })

                    <div class="form-group input-group-sm">
                        @Html.LabelFor(model => model.Trail.date_of_trail, htmlAttributes: new { @class = "label-on-left text-primary control-label col-md-3" })
                        <div class="col-md-7 more-pading">
                            @Html.EditorFor(model => model.Trail.date_of_trail, new { htmlAttributes = new { @class = "form-control datepicker" } })
                            @Html.ValidationMessageFor(model => model.Trail.date_of_trail, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Trail.place_of_start, htmlAttributes: new { @class = "control-label text-primary label-on-left col-md-3" })
                        <div class="col-md-7 more-pading">
                            @Html.EditorFor(model => model.Trail.place_of_start, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Trail.place_of_start, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Trail.distance, htmlAttributes: new { @class = "control-label text-primary label-on-left col-md-3" })
                        <div class="col-md-7 more-pading">
                            @Html.EditorFor(model => model.Trail.distance, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Trail.distance, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Trail.type_of_trail, htmlAttributes: new { @class = "control-label text-primary label-on-left col-md-3" })
                        <div class="col-md-7 more-pading">
                            @Html.DropDownListFor(model => model.Trail.type_of_trail, (IEnumerable<SelectListItem>)ViewBag.trailtype, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Trail.type_of_trail, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Trail.description, htmlAttributes: new { @class = "control-label text-primary label-on-left col-md-3" })
                        <div class="col-md-7 more-pading">
                            @Html.EditorFor(model => model.Trail.description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Trail.description, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Trail.city, htmlAttributes: new { @class = "control-label text-primary label-on-left col-md-3" })
                        <div class="col-md-7 more-pading">
                            @Html.EditorFor(model => model.Trail.city, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Trail.city, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Trail.country, htmlAttributes: new { @class = "label-on-left text-primary control-label col-md-3" })
                        <div class="col-md-7 more-pading">
                            @Html.EditorFor(model => model.Trail.country, new { htmlAttributes = new { @class = "form-control", id = "encoded-country" } })
                            @Html.ValidationMessageFor(model => model.Trail.country, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-3 col-md-10">
                            <input type="submit" value="Create" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-7">
                <div id="map"></div>
            </div>
        </div>
    }

    <script>
        // This example requires the Drawing library. Include the libraries=drawing
        // parameter when you first load the API. For example:
        // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=drawing">

        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 14,
                center: { lat: 34.366, lng: -89.519 }
            });

            var infoWindow = new google.maps.InfoWindow({ map: map });

            // Try HTML5 geolocation.
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };

                    $.get('https://maps.googleapis.com/maps/api/geocode/json?latlng=' + pos.lat + ',' + pos.lng + '&key=AIzaSyDlMv8xn211_jUD090RoKzKl628cNECFXQ',
                       function (data) {
                           var results = data.results;
                           if (results[0]) {
                               for (var j = 0; j < results.length; j++) {
                                   for (var i = 0; i < results[j].address_components.length; i++) {
                                       if (results[j].address_components[i].types[0] == "country") {
                                           country = results[j].address_components[i];
                                       }
                                   }
                               }
                               document.getElementById('encoded-country').value = country.long_name;
                               //alert(country.long_name);
                               //console.log(country.short_name);
                           } else {
                               alert("No results found");
                           }
                       });

                    infoWindow.setPosition(pos);
                    infoWindow.setContent('Your Position');
                    map.setCenter(pos);
                }, function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
            }

            var poly = new google.maps.Polyline({
                strokeColor: '#000000',
                strokeOpacity: 1,
                strokeWeight: 3,
                map: map
            });

            // Add a listener for the click event
            google.maps.event.addListener(map, 'click', function (event) {
                addLatLngToPoly(event.latLng, poly);
            });
        }

        function addLatLngToPoly(latLng, poly) {
            var path = poly.getPath();
            // Because path is an MVCArray, we can simply append a new coordinate
            // and it will automatically appear
            path.push(latLng);

            // Update the text field to display the polyline encodings
            var encodeString = google.maps.geometry.encoding.encodePath(path);
            if (encodeString) {
                document.getElementById('encoded-polyline').value = encodeString;
            }
        }

        function handleLocationError(browserHasGeolocation, infoWindow, pos) {
            infoWindow.setPosition(pos);
            infoWindow.setContent(browserHasGeolocation ?
                                  'Error: The Geolocation service failed.' :
                                  'Error: Your browser doesn\'t support geolocation.');

        }
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDlMv8xn211_jUD090RoKzKl628cNECFXQ&libraries=drawing&callback=initMap"
            async defer></script>

</div>